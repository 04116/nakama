// Code generated by github.com/gobuffalo/packr. DO NOT EDIT

package migrate

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("./sql", "20180103142001_initial_schema.sql", "\"LyoKICogQ29weXJpZ2h0IDIwMTggVGhlIE5ha2FtYSBBdXRob3JzCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgotLSArbWlncmF0ZSBVcApDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB1c2VycyAoCiAgICBQUklNQVJZIEtFWSAoaWQpLAoKICAgIGlkICAgICAgICAgICAgVVVJRCAgICAgICAgICBOT1QgTlVMTCwKICAgIHVzZXJuYW1lICAgICAgVkFSQ0hBUigxMjgpICBDT05TVFJBSU5UIHVzZXJzX3VzZXJuYW1lX2tleSBVTklRVUUgTk9UIE5VTEwsCiAgICBkaXNwbGF5X25hbWUgIFZBUkNIQVIoMjU1KSwKICAgIGF2YXRhcl91cmwgICAgVkFSQ0hBUig1MTIpLAogICAgLS0gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2JjcDQ3CiAgICBsYW5nX3RhZyAgICAgIFZBUkNIQVIoMTgpICAgREVGQVVMVCAnZW4nLAogICAgbG9jYXRpb24gICAgICBWQVJDSEFSKDI1NSksIC0tIGUuZy4gIlNhbiBGcmFuY2lzY28sIENBIgogICAgdGltZXpvbmUgICAgICBWQVJDSEFSKDI1NSksIC0tIGUuZy4gIlBhY2lmaWMgVGltZSAoVVMgJiBDYW5hZGEpIgogICAgbWV0YWRhdGEgICAgICBKU09OQiAgICAgICAgIERFRkFVTFQgJ3t9JyBOT1QgTlVMTCwKICAgIHdhbGxldCAgICAgICAgSlNPTkIgICAgICAgICBERUZBVUxUICd7fScgTk9UIE5VTEwsCiAgICBlbWFpbCAgICAgICAgIFZBUkNIQVIoMjU1KSAgVU5JUVVFLAogICAgcGFzc3dvcmQgICAgICBCWVRFQSAgICAgICAgIENIRUNLIChsZW5ndGgocGFzc3dvcmQpIDwgMzIwMDApLAogICAgZmFjZWJvb2tfaWQgICBWQVJDSEFSKDEyOCkgIFVOSVFVRSwKICAgIGdvb2dsZV9pZCAgICAgVkFSQ0hBUigxMjgpICBVTklRVUUsCiAgICBnYW1lY2VudGVyX2lkIFZBUkNIQVIoMTI4KSAgVU5JUVVFLAogICAgc3RlYW1faWQgICAgICBWQVJDSEFSKDEyOCkgIFVOSVFVRSwKICAgIGN1c3RvbV9pZCAgICAgVkFSQ0hBUigxMjgpICBVTklRVUUsCiAgICBlZGdlX2NvdW50ICAgIElOVCAgICAgICAgICAgREVGQVVMVCAwIENIRUNLIChlZGdlX2NvdW50ID49IDApIE5PVCBOVUxMLAogICAgY3JlYXRlX3RpbWUgICBUSU1FU1RBTVBUWiAgIERFRkFVTFQgbm93KCkgTk9UIE5VTEwsCiAgICB1cGRhdGVfdGltZSAgIFRJTUVTVEFNUFRaICAgREVGQVVMVCBub3coKSBOT1QgTlVMTCwKICAgIHZlcmlmeV90aW1lICAgVElNRVNUQU1QVFogICBERUZBVUxUIENBU1QoMCBBUyBUSU1FU1RBTVBUWikgTk9UIE5VTEwsCiAgICBkaXNhYmxlX3RpbWUgIFRJTUVTVEFNUFRaICAgREVGQVVMVCBDQVNUKDAgQVMgVElNRVNUQU1QVFopIE5PVCBOVUxMCik7CgotLSBTZXR1cCBTeXN0ZW0gdXNlci4KSU5TRVJUIElOVE8gdXNlcnMgKGlkLCB1c2VybmFtZSkKICAgIFZBTFVFUyAoJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCcsICcnKQogICAgT04gQ09ORkxJQ1QoaWQpIERPIE5PVEhJTkc7CgpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB1c2VyX2RldmljZSAoCiAgICBQUklNQVJZIEtFWSAoaWQpLAogICAgRk9SRUlHTiBLRVkgKHVzZXJfaWQpIFJFRkVSRU5DRVMgdXNlcnMgKGlkKSBPTiBERUxFVEUgQ0FTQ0FERSwKCiAgICBpZCAgICAgIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCwKICAgIHVzZXJfaWQgVVVJRCAgICAgICAgIE5PVCBOVUxMCik7CgpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB1c2VyX2VkZ2UgKAogICAgUFJJTUFSWSBLRVkgKHNvdXJjZV9pZCwgc3RhdGUsIHBvc2l0aW9uKSwKICAgIEZPUkVJR04gS0VZIChzb3VyY2VfaWQpICAgICAgUkVGRVJFTkNFUyB1c2VycyAoaWQpIE9OIERFTEVURSBDQVNDQURFLAogICAgRk9SRUlHTiBLRVkgKGRlc3RpbmF0aW9uX2lkKSBSRUZFUkVOQ0VTIHVzZXJzIChpZCkgT04gREVMRVRFIENBU0NBREUsCgogICAgc291cmNlX2lkICAgICAgVVVJRCAgICAgICAgTk9UIE5VTEwsCiAgICBwb3NpdGlvbiAgICAgICBCSUdJTlQgICAgICBOT1QgTlVMTCwgLS0gVXNlZCBmb3Igc29ydCBvcmRlciBvbiByb3dzLgogICAgdXBkYXRlX3RpbWUgICAgVElNRVNUQU1QVFogREVGQVVMVCBub3coKSBOT1QgTlVMTCwKICAgIGRlc3RpbmF0aW9uX2lkIFVVSUQgICAgICAgIE5PVCBOVUxMLAogICAgc3RhdGUgICAgICAgICAgU01BTExJTlQgICAgREVGQVVMVCAwIE5PVCBOVUxMLCAtLSBmcmllbmQoMCksIGludml0ZSgxKSwgaW52aXRlZCgyKSwgYmxvY2tlZCgzKSwgZGVsZXRlZCg0KSwgYXJjaGl2ZWQoNSkKCiAgICBVTklRVUUgKHNvdXJjZV9pZCwgZGVzdGluYXRpb25faWQpCik7CgpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBub3RpZmljYXRpb24gKAogICAgLS0gRklYTUU6IGNvY2tyb2FjaCdzIGFuYWx5c2VyIGlzIG5vdCBjbGV2ZXIgZW5vdWdoIHdoZW4gY3JlYXRlX3RpbWUgaGFzIERFU0MgbW9kZSBvbiB0aGUgaW5kZXguCiAgICBQUklNQVJZIEtFWSAodXNlcl9pZCwgY3JlYXRlX3RpbWUsIGlkKSwKICAgIEZPUkVJR04gS0VZICh1c2VyX2lkKSBSRUZFUkVOQ0VTIHVzZXJzIChpZCkgT04gREVMRVRFIENBU0NBREUsCgogICAgaWQgICAgICAgICAgVVVJRCAgICAgICAgIENPTlNUUkFJTlQgbm90aWZpY2F0aW9uX2lkX2tleSBVTklRVUUgTk9UIE5VTEwsCiAgICB1c2VyX2lkICAgICBVVUlEICAgICAgICAgTk9UIE5VTEwsCiAgICBzdWJqZWN0ICAgICBWQVJDSEFSKDI1NSkgTk9UIE5VTEwsCiAgICBjb250ZW50ICAgICBKU09OQiAgICAgICAgREVGQVVMVCAne30nIE5PVCBOVUxMLAogICAgY29kZSAgICAgICAgU01BTExJTlQgICAgIE5PVCBOVUxMLCAtLSBOZWdhdGl2ZSB2YWx1ZXMgYXJlIHN5c3RlbSByZXNlcnZlZC4KICAgIHNlbmRlcl9pZCAgIFVVSUQgICAgICAgICBOT1QgTlVMTCwKICAgIGNyZWF0ZV90aW1lIFRJTUVTVEFNUFRaICBERUZBVUxUIG5vdygpIE5PVCBOVUxMCik7CgpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBzdG9yYWdlICgKICAgIFBSSU1BUlkgS0VZIChjb2xsZWN0aW9uLCByZWFkLCBrZXksIHVzZXJfaWQpLAogICAgRk9SRUlHTiBLRVkgKHVzZXJfaWQpIFJFRkVSRU5DRVMgdXNlcnMgKGlkKSBPTiBERUxFVEUgQ0FTQ0FERSwKCiAgICBjb2xsZWN0aW9uICBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsCiAgICBrZXkgICAgICAgICBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsCiAgICB1c2VyX2lkICAgICBVVUlEICAgICAgICAgTk9UIE5VTEwsCiAgICB2YWx1ZSAgICAgICBKU09OQiAgICAgICAgREVGQVVMVCAne30nIE5PVCBOVUxMLAogICAgdmVyc2lvbiAgICAgVkFSQ0hBUigzMikgIE5PVCBOVUxMLCAtLSBtZDUgaGFzaCBvZiB2YWx1ZSBvYmplY3QuCiAgICByZWFkICAgICAgICBTTUFMTElOVCAgICAgREVGQVVMVCAxIENIRUNLIChyZWFkID49IDApIE5PVCBOVUxMLAogICAgd3JpdGUgICAgICAgU01BTExJTlQgICAgIERFRkFVTFQgMSBDSEVDSyAod3JpdGUgPj0gMCkgTk9UIE5VTEwsCiAgICBjcmVhdGVfdGltZSBUSU1FU1RBTVBUWiAgREVGQVVMVCBub3coKSBOT1QgTlVMTCwKICAgIHVwZGF0ZV90aW1lIFRJTUVTVEFNUFRaICBERUZBVUxUIG5vdygpIE5PVCBOVUxMLAoKICAgIFVOSVFVRSAoY29sbGVjdGlvbiwga2V5LCB1c2VyX2lkKQopOwpDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBjb2xsZWN0aW9uX3JlYWRfdXNlcl9pZF9rZXlfaWR4IE9OIHN0b3JhZ2UgKGNvbGxlY3Rpb24sIHJlYWQsIHVzZXJfaWQsIGtleSk7CkNSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIHZhbHVlX2dpbmlkeCBPTiBzdG9yYWdlIFVTSU5HIEdJTiAodmFsdWUpOwoKQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgbWVzc2FnZSAoCiAgUFJJTUFSWSBLRVkgKHN0cmVhbV9tb2RlLCBzdHJlYW1fc3ViamVjdCwgc3RyZWFtX2Rlc2NyaXB0b3IsIHN0cmVhbV9sYWJlbCwgY3JlYXRlX3RpbWUsIGlkKSwKICBGT1JFSUdOIEtFWSAoc2VuZGVyX2lkKSBSRUZFUkVOQ0VTIHVzZXJzIChpZCkgT04gREVMRVRFIENBU0NBREUsCgogIGlkICAgICAgICAgICAgICAgIFVVSUQgICAgICAgICBVTklRVUUgTk9UIE5VTEwsCiAgLS0gY2hhdCgwKSwgY2hhdF91cGRhdGUoMSksIGNoYXRfcmVtb3ZlKDIpLCBncm91cF9qb2luKDMpLCBncm91cF9hZGQoNCksIGdyb3VwX2xlYXZlKDUpLCBncm91cF9raWNrKDYpLCBncm91cF9wcm9tb3RlZCg3KQogIGNvZGUgICAgICAgICAgICAgIFNNQUxMSU5UICAgICBERUZBVUxUIDAgTk9UIE5VTEwsCiAgc2VuZGVyX2lkICAgICAgICAgVVVJRCAgICAgICAgIE5PVCBOVUxMLAogIHVzZXJuYW1lICAgICAgICAgIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCwKICBzdHJlYW1fbW9kZSAgICAgICBTTUFMTElOVCAgICAgTk9UIE5VTEwsCiAgc3RyZWFtX3N1YmplY3QgICAgVVVJRCAgICAgICAgIE5PVCBOVUxMLAogIHN0cmVhbV9kZXNjcmlwdG9yIFVVSUQgICAgICAgICBOT1QgTlVMTCwKICBzdHJlYW1fbGFiZWwgICAgICBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsCiAgY29udGVudCAgICAgICAgICAgSlNPTkIgICAgICAgIERFRkFVTFQgJ3t9JyBOT1QgTlVMTCwKICBjcmVhdGVfdGltZSAgICAgICBUSU1FU1RBTVBUWiAgREVGQVVMVCBub3coKSBOT1QgTlVMTCwKICB1cGRhdGVfdGltZSAgICAgICBUSU1FU1RBTVBUWiAgREVGQVVMVCBub3coKSBOT1QgTlVMTCwKCiAgVU5JUVVFIChzZW5kZXJfaWQsIGlkKQopOwoKQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgbGVhZGVyYm9hcmQgKAogIFBSSU1BUlkgS0VZIChpZCksCgogIGlkICAgICAgICAgICAgIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCwKICBhdXRob3JpdGF0aXZlICBCT09MRUFOICAgICAgREVGQVVMVCBGQUxTRSwKICBzb3J0X29yZGVyICAgICBTTUFMTElOVCAgICAgREVGQVVMVCAxIE5PVCBOVUxMLCAtLSBhc2MoMCksIGRlc2MoMSkKICBvcGVyYXRvciAgICAgICBTTUFMTElOVCAgICAgREVGQVVMVCAwIE5PVCBOVUxMLCAtLSBiZXN0KDApLCBzZXQoMSksIGluY3JlbWVudCgyKSwgZGVjcmVtZW50KDMpCiAgcmVzZXRfc2NoZWR1bGUgVkFSQ0hBUig2NCksIC0tIGUuZy4gY3JvbiBmb3JtYXQ6ICIqICogKiAqICogKiAqIgogIG1ldGFkYXRhICAgICAgIEpTT05CICAgICAgICBERUZBVUxUICd7fScgTk9UIE5VTEwsCiAgY3JlYXRlX3RpbWUgICAgVElNRVNUQU1QVFogIERFRkFVTFQgbm93KCkgTk9UIE5VTEwKKTsKCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGxlYWRlcmJvYXJkX3JlY29yZCAoCiAgUFJJTUFSWSBLRVkgKGxlYWRlcmJvYXJkX2lkLCBleHBpcnlfdGltZSwgc2NvcmUsIHN1YnNjb3JlLCBvd25lcl9pZCksCiAgRk9SRUlHTiBLRVkgKGxlYWRlcmJvYXJkX2lkKSBSRUZFUkVOQ0VTIGxlYWRlcmJvYXJkIChpZCkgT04gREVMRVRFIENBU0NBREUsCgogIGxlYWRlcmJvYXJkX2lkIFZBUkNIQVIoMTI4KSAgTk9UIE5VTEwsCiAgb3duZXJfaWQgICAgICAgVVVJRCAgICAgICAgICBOT1QgTlVMTCwKICB1c2VybmFtZSAgICAgICBWQVJDSEFSKDEyOCksCiAgc2NvcmUgICAgICAgICAgQklHSU5UICAgICAgICBERUZBVUxUIDAgQ0hFQ0sgKHNjb3JlID49IDApIE5PVCBOVUxMLAogIHN1YnNjb3JlICAgICAgIEJJR0lOVCAgICAgICAgREVGQVVMVCAwIENIRUNLIChzdWJzY29yZSA+PSAwKSBOT1QgTlVMTCwKICBudW1fc2NvcmUgICAgICBJTlQgICAgICAgICAgIERFRkFVTFQgMSBDSEVDSyAobnVtX3Njb3JlID49IDApIE5PVCBOVUxMLAogIG1ldGFkYXRhICAgICAgIEpTT05CICAgICAgICAgREVGQVVMVCAne30nIE5PVCBOVUxMLAogIGNyZWF0ZV90aW1lICAgIFRJTUVTVEFNUFRaICAgREVGQVVMVCBub3coKSBOT1QgTlVMTCwKICB1cGRhdGVfdGltZSAgICBUSU1FU1RBTVBUWiAgIERFRkFVTFQgbm93KCkgTk9UIE5VTEwsCiAgZXhwaXJ5X3RpbWUgICAgVElNRVNUQU1QVFogICBERUZBVUxUIENBU1QoMCBBUyBUSU1FU1RBTVBUWikgTk9UIE5VTEwsCgogIFVOSVFVRSAob3duZXJfaWQsIGxlYWRlcmJvYXJkX2lkLCBleHBpcnlfdGltZSkKKTsKCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHdhbGxldF9sZWRnZXIgKAogIFBSSU1BUlkgS0VZICh1c2VyX2lkLCBjcmVhdGVfdGltZSwgaWQpLAogIEZPUkVJR04gS0VZICh1c2VyX2lkKSBSRUZFUkVOQ0VTIHVzZXJzIChpZCkgT04gREVMRVRFIENBU0NBREUsCgogIGlkICAgICAgICAgIFVVSUQgICAgICAgIFVOSVFVRSBOT1QgTlVMTCwKICB1c2VyX2lkICAgICBVVUlEICAgICAgICBOT1QgTlVMTCwKICBjaGFuZ2VzZXQgICBKU09OQiAgICAgICBOT1QgTlVMTCwKICBtZXRhZGF0YSAgICBKU09OQiAgICAgICBOT1QgTlVMTCwKICBjcmVhdGVfdGltZSBUSU1FU1RBTVBUWiBERUZBVUxUIG5vdygpIE5PVCBOVUxMLAogIHVwZGF0ZV90aW1lIFRJTUVTVEFNUFRaIERFRkFVTFQgbm93KCkgTk9UIE5VTEwKKTsKCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHVzZXJfdG9tYnN0b25lICgKICBQUklNQVJZIEtFWSAoY3JlYXRlX3RpbWUsIHVzZXJfaWQpLAoKICB1c2VyX2lkICAgICAgICBVVUlEICAgICAgICBVTklRVUUgTk9UIE5VTEwsCiAgY3JlYXRlX3RpbWUgICAgVElNRVNUQU1QVFogREVGQVVMVCBub3coKSBOT1QgTlVMTAopOwoKQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgZ3JvdXBzICgKICBQUklNQVJZIEtFWSAoZGlzYWJsZV90aW1lLCBsYW5nX3RhZywgZWRnZV9jb3VudCwgaWQpLAoKICBpZCAgICAgICAgICAgVVVJRCAgICAgICAgICBVTklRVUUgTk9UIE5VTEwsCiAgY3JlYXRvcl9pZCAgIFVVSUQgICAgICAgICAgTk9UIE5VTEwsCiAgbmFtZSAgICAgICAgIFZBUkNIQVIoMjU1KSAgQ09OU1RSQUlOVCBncm91cHNfbmFtZV9rZXkgVU5JUVVFIE5PVCBOVUxMLAogIGRlc2NyaXB0aW9uICBWQVJDSEFSKDI1NSksCiAgYXZhdGFyX3VybCAgIFZBUkNIQVIoNTEyKSwKICAtLSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvYmNwNDcKICBsYW5nX3RhZyAgICAgVkFSQ0hBUigxOCkgICBERUZBVUxUICdlbicsCiAgbWV0YWRhdGEgICAgIEpTT05CICAgICAgICAgREVGQVVMVCAne30nIE5PVCBOVUxMLAogIHN0YXRlICAgICAgICBTTUFMTElOVCAgICAgIERFRkFVTFQgMCBDSEVDSyAoc3RhdGUgPj0gMCkgTk9UIE5VTEwsIC0tIG9wZW4oMCksIGNsb3NlZCgxKQogIGVkZ2VfY291bnQgICBJTlQgICAgICAgICAgIERFRkFVTFQgMCBDSEVDSyAoZWRnZV9jb3VudCA+PSAxIEFORCBlZGdlX2NvdW50IDw9IG1heF9jb3VudCkgTk9UIE5VTEwsCiAgbWF4X2NvdW50ICAgIElOVCAgICAgICAgICAgREVGQVVMVCAxMDAgQ0hFQ0sgKG1heF9jb3VudCA+PSAxKSBOT1QgTlVMTCwKICBjcmVhdGVfdGltZSAgVElNRVNUQU1QVFogICBERUZBVUxUIG5vdygpIE5PVCBOVUxMLAogIHVwZGF0ZV90aW1lICBUSU1FU1RBTVBUWiAgIERFRkFVTFQgbm93KCkgTk9UIE5VTEwsCiAgZGlzYWJsZV90aW1lIFRJTUVTVEFNUFRaICAgREVGQVVMVCBDQVNUKDAgQVMgVElNRVNUQU1QVFopIE5PVCBOVUxMCik7CkNSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGVkZ2VfY291bnRfdXBkYXRlX3RpbWVfaWRfaWR4IE9OIGdyb3VwcyAoZGlzYWJsZV90aW1lLCBlZGdlX2NvdW50LCB1cGRhdGVfdGltZSwgaWQpOwpDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyB1cGRhdGVfdGltZV9lZGdlX2NvdW50X2lkX2lkeCBPTiBncm91cHMgKGRpc2FibGVfdGltZSwgdXBkYXRlX3RpbWUsIGVkZ2VfY291bnQsIGlkKTsKCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGdyb3VwX2VkZ2UgKAogIFBSSU1BUlkgS0VZIChzb3VyY2VfaWQsIHN0YXRlLCBwb3NpdGlvbiksCgogIHNvdXJjZV9pZCAgICAgIFVVSUQgICAgICAgIE5PVCBOVUxMLAogIHBvc2l0aW9uICAgICAgIEJJR0lOVCAgICAgIE5PVCBOVUxMLCAtLSBVc2VkIGZvciBzb3J0IG9yZGVyIG9uIHJvd3MuCiAgdXBkYXRlX3RpbWUgICAgVElNRVNUQU1QVFogREVGQVVMVCBub3coKSBOT1QgTlVMTCwKICBkZXN0aW5hdGlvbl9pZCBVVUlEICAgICAgICBOT1QgTlVMTCwKICBzdGF0ZSAgICAgICAgICBTTUFMTElOVCAgICBERUZBVUxUIDAgTk9UIE5VTEwsIC0tIHN1cGVyYWRtaW4oMCksIGFkbWluKDEpLCBtZW1iZXIoMiksIGpvaW5fcmVxdWVzdCgzKSwgYXJjaGl2ZWQoNCkKCiAgVU5JUVVFIChzb3VyY2VfaWQsIGRlc3RpbmF0aW9uX2lkKQopOwoKLS0gK21pZ3JhdGUgRG93bgpEUk9QIFRBQkxFIElGIEVYSVNUUyBncm91cF9lZGdlOwpEUk9QIFRBQkxFIElGIEVYSVNUUyBncm91cHM7CkRST1AgVEFCTEUgSUYgRVhJU1RTIHVzZXJfdG9tYnN0b25lOwpEUk9QIFRBQkxFIElGIEVYSVNUUyB3YWxsZXRfbGVkZ2VyOwpEUk9QIFRBQkxFIElGIEVYSVNUUyBsZWFkZXJib2FyZF9yZWNvcmQ7CkRST1AgVEFCTEUgSUYgRVhJU1RTIGxlYWRlcmJvYXJkOwpEUk9QIFRBQkxFIElGIEVYSVNUUyBtZXNzYWdlOwpEUk9QIFRBQkxFIElGIEVYSVNUUyBzdG9yYWdlOwpEUk9QIFRBQkxFIElGIEVYSVNUUyBub3RpZmljYXRpb247CkRST1AgVEFCTEUgSUYgRVhJU1RTIHVzZXJfZWRnZTsKRFJPUCBUQUJMRSBJRiBFWElTVFMgdXNlcl9kZXZpY2U7CkRST1AgVEFCTEUgSUYgRVhJU1RTIHVzZXJzOwo=\"")
}
